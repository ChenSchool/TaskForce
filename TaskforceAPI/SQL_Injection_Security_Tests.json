{
	"info": {
		"_postman_id": "sql-injection-tests",
		"name": "TaskforceAPI - SQL Injection Security Tests",
		"description": "Security testing collection for SQL injection vulnerabilities in TaskforceAPI endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "GET Parameter SQL Injection Tests",
			"item": [
				{
					"name": "Aircraft ID - Basic SQL Injection",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/aircraft/1' OR '1'='1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft",
								"1' OR '1'='1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aircraft ID - Union Select Attack",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/aircraft/1 UNION SELECT 1,database()--",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft",
								"1 UNION SELECT 1,database()--"
							]
						}
					},
					"response": []
				},
				{
					"name": "Personnel ID - Boolean-based Blind SQL Injection",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/personnel/1' AND (SELECT COUNT(*) FROM information_schema.tables)>0--",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"personnel",
								"1' AND (SELECT COUNT(*) FROM information_schema.tables)>0--"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tasks ID - Time-based Blind SQL Injection",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/1'; WAITFOR DELAY '00:00:05'--",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"1'; WAITFOR DELAY '00:00:05'--"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assignments ID - Error-based SQL Injection",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assignments/1' AND (SELECT * FROM (SELECT COUNT(*),CONCAT(version(),FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assignments",
								"1' AND (SELECT * FROM (SELECT COUNT(*),CONCAT(version(),FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST Body SQL Injection Tests",
			"item": [
				{
					"name": "Aircraft Creation - SQL Injection in tail_number",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tail_number\": \"N123'; DROP TABLE aircraft; --\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/aircraft",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft"
							]
						}
					},
					"response": []
				},
				{
					"name": "Personnel Creation - SQL Injection in name field",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John'; INSERT INTO personnel (name, specialty, role) VALUES ('Hacker', 'A&P', 'Captain'); --\",\n    \"specialty\": \"A&P\",\n    \"role\": \"Captain\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/personnel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"personnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Task Creation - SQL Injection in description",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"aircraft_id\": 1,\n    \"shift\": \"1st\",\n    \"description\": \"Engine check'; UPDATE tasks SET status='Complete' WHERE id=1; --\",\n    \"status\": \"Incomplete\",\n    \"date\": \"2025-08-10\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assignment Creation - SQL Injection in personnel_name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task_id\": 1,\n    \"personnel_id\": 1,\n    \"personnel_name\": \"John'; SELECT * FROM personnel; --\",\n    \"role\": \"Captain\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/assignments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assignments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT Body SQL Injection Tests",
			"item": [
				{
					"name": "Aircraft Update - SQL Injection in tail_number",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tail_number\": \"N456'; UPDATE aircraft SET tail_number='HACKED' WHERE id=1; --\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/aircraft/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Personnel Update - SQL Injection Multiple Fields",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jane'; DELETE FROM personnel WHERE id > 0; --\",\n    \"specialty\": \"Avionics\",\n    \"role\": \"Coordinator\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/personnel/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"personnel",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Advanced SQL Injection Tests",
			"item": [
				{
					"name": "Database Schema Discovery",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/aircraft/1 UNION SELECT table_name,column_name FROM information_schema.columns WHERE table_schema=database()--",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft",
								"1 UNION SELECT table_name,column_name FROM information_schema.columns WHERE table_schema=database()--"
							]
						}
					},
					"response": []
				},
				{
					"name": "Database Version Discovery",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/personnel/1 UNION SELECT @@version,user()--",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"personnel",
								"1 UNION SELECT @@version,user()--"
							]
						}
					},
					"response": []
				},
				{
					"name": "File System Access Attempt",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/1 UNION SELECT LOAD_FILE('/etc/passwd'),null--",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"1 UNION SELECT LOAD_FILE('/etc/passwd'),null--"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nested Query Attack",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tail_number\": \"N789'; SELECT * FROM (SELECT CONCAT((SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()),':',FLOOR(RAND(0)*2))) AS x; --\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/aircraft",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Encoded SQL Injection Tests",
			"item": [
				{
					"name": "URL Encoded SQL Injection",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/aircraft/1%27%20OR%20%271%27%3D%271",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft",
								"1%27%20OR%20%271%27%3D%271"
							]
						}
					},
					"response": []
				},
				{
					"name": "Double URL Encoded SQL Injection",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/personnel/1%2527%2520OR%2520%25271%2527%253D%25271",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"personnel",
								"1%2527%2520OR%2520%25271%2527%253D%25271"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hex Encoded SQL Injection",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"0x4a6f686e27204f52202731273d2731\",\n    \"specialty\": \"A&P\",\n    \"role\": \"Captain\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/personnel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"personnel"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NoSQL Injection Tests (if applicable)",
			"item": [
				{
					"name": "MongoDB-style Injection in JSON",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {\"$ne\": null},\n    \"specialty\": \"A&P\",\n    \"role\": \"Captain\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/personnel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"personnel"
							]
						}
					},
					"response": []
				},
				{
					"name": "JavaScript Injection",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tail_number\": \"'; return true; var x=''\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/aircraft",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log('Security Test Starting: ' + pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Basic security checks",
					"pm.test('Response should not contain SQL error messages', function () {",
					"    const responseText = pm.response.text().toLowerCase();",
					"    const sqlErrors = [",
					"        'sql syntax',",
					"        'mysql_fetch',",
					"        'ora-',",
					"        'microsoft odbc',",
					"        'error in your sql syntax',",
					"        'mysql_query()',",
					"        'warning: mysql',",
					"        'postgresql query failed'",
					"    ];",
					"    ",
					"    sqlErrors.forEach(error => {",
					"        pm.expect(responseText).to.not.include(error);",
					"    });",
					"});",
					"",
					"pm.test('Response should not expose database structure', function () {",
					"    const responseText = pm.response.text().toLowerCase();",
					"    const dbStructureKeywords = [",
					"        'information_schema',",
					"        'table_name',",
					"        'column_name',",
					"        'mysql.user'",
					"    ];",
					"    ",
					"    dbStructureKeywords.forEach(keyword => {",
					"        pm.expect(responseText).to.not.include(keyword);",
					"    });",
					"});",
					"",
					"pm.test('Response time should be reasonable (not delayed by time-based injection)', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test('Status code should be appropriate (not 200 for malicious input)', function () {",
					"    // Expect either proper error codes or successful responses that don't expose data",
					"    const acceptableStatusCodes = [200, 400, 404, 422, 500];",
					"    pm.expect(acceptableStatusCodes).to.include(pm.response.code);",
					"});",
					"",
					"console.log('Security Test Completed: ' + pm.info.requestName);"
				]
			}
		}
	]
}
